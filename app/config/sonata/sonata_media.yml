#
# more information can be found here http://sonata-project.org/bundles/media
#
sonata_media:
    db_driver:       doctrine_orm # | doctrine_mongodb
    class:
        media:              Application\Sonata\MediaBundle\Entity\Media
        gallery:            Application\Sonata\MediaBundle\Entity\Gallery
        gallery_has_media:  Application\Sonata\MediaBundle\Entity\GalleryHasMedia

    default_context: default
    contexts:
        default:  # the default context is mandatory
            download:
                strategy: sonata.media.security.public_strategy
                mode: http # X-Sendfile | http
            providers:
                # - sonata.media.provider.dailymotion
                # - sonata.media.provider.youtube
                # - sonata.media.provider.image
                - sonata.media.provider.file
                # - sonata.media.provider.vimeo
            formats: ~

        news:
            download:
                strategy: sonata.media.security.public_strategy
                mode: http # X-Sendfile | http
            providers:
                - sonata.media.provider.image
                - sonata.media.provider.file

            formats:
               abtract: { width: 100, quality: 100}
               wide:    { width: 820 , quality: 100}

        # sonata_category:
        #     providers:
        #       - sonata.media.provider.image

        #     formats:
        #         preview: { width: 100, quality: 100}
        #         wide:    { width: 820, quality: 100}

    cdn:
        # define the public base url for the uploaded media
        server:
            path:      %sonata_media.cdn.host%

    filesystem:
        # define where the uploaded file will be stored
        local:
            directory:  %kernel.root_dir%/../web/uploads/media
            create:     true

    providers:
        file:
            resizer:    false
            filesystem: sonata.media.filesystem.local
            thumbnail:  sonata.media.thumbnail.format
            allowed_extensions: ['pdf', 'txt', 'rtf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pttx', 'odt', 'odg', 'odp', 'ods', 'odc', 'odf', 'odb', 'csv', 'xml']

    pixlr:
        enabled:  false
        referrer: CVRF - Comunidad Virtual de Recursos Forestales

    resizer:
        simple:
#            mode:  outbound
            mode:  inset

#
# The LiipImagineBundle can be used if you want to convert on demand an image
# to a specific format. (ie a controller render the file)
#    more information can be found here : https://github.com/liip/LiipImagineBundle
#
#liip_imagine:
#    filter_sets:
#        default_small:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [100, 70], mode: outbound }
#
#
#        default_big:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [500, 70], mode: outbound }

# Enable Doctrine to map the provided entities
doctrine:
    orm:
        entity_managers:
            default:
                mappings:
                    ApplicationSonataMediaBundle: ~
                    SonataMediaBundle: ~